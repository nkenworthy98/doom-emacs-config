#+TITLE: Doom Emacs Configuration

* Table of Contents :TOC:
- [[#doom-emacs-general-configuration][Doom Emacs General Configuration]]
- [[#org-agenda][Org-Agenda]]
- [[#elfeed-configuration][Elfeed Configuration]]
- [[#link-handler---urlscanscriptsh][Link Handler - urlscanScript.sh]]
- [[#custom-keybindings][Custom Keybindings]]
- [[#custom-macros][Custom Macros]]
- [[#custom-functions][Custom Functions]]
  - [[#custom-vterm-functions][custom vterm functions]]
- [[#dired-functions][Dired Functions]]
- [[#org-capture][Org-capture]]

* Doom Emacs General Configuration
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; refresh' after modifying this file!


;; These are used for a number of things, particularly for GPG configuration,
;; some email clients, file templates and snippets.
(setq user-full-name "Nick K"
      user-mail-address "xndt98@live.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Terminus" :size 18))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. These are the defaults.
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'wheatgrass)
(setq doom-theme 'doom-acario-dark)

;; If you intend to use org, it is recommended you change this!
(setq org-directory "~/.emacsOrgFiles/org/")

;; If you want to change the style of line numbers, change this to `relative' or
;; `nil' to disable it:
(setq display-line-numbers-type 'relative)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', where Emacs
;;   looks when you load packages with `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.

#+end_src

* Org-Agenda
This specifies the file where the org-agenda information is stored.
#+begin_src elisp
(setq org-agenda-files '("~/.emacsOrgFiles/agenda/todo.org"))
#+end_src

* Elfeed Configuration
To enable elfeed.org using init.el with doom emacs, make sure to add "+org" after rss under the :app section.
#+begin_src elisp
;; This is for elfeed
;; https://develop.spacemacs.org/layers/+readers/elfeed/README.html#setup-feeds
;; Page for documentation on getting elfeed setup
;; (elfeed :variables rmh-elfeed-org-files (list "~/.emacsOrgFiles/private/elfeed1.org"))
(setq rmh-elfeed-org-files (list "~/.emacsOrgFiles/private/elfeed.org"))
#+end_src

Found this in the docs about elfeed specifically. This is used to change the default search filter. As it turns out, I need to wait until after elfeed is loaded before setting the variable. [[~/.emacs.d/modules/app/rss/README.org][Link to internal docs]]
#+begin_src elisp
(after! elfeed
  (setq elfeed-search-filter "@2-week-ago +yt"))
#+end_src

* Link Handler - urlscanScript.sh
In urlscanScript.sh, I specify how links should be handled and which programs they should be opened in.
#+begin_src elisp
;; This is to watch mpv in elfeed
;; It calls urlscanScript from ~/bin
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "urlscanScript.sh")
#+end_src

* Custom Keybindings
#+begin_src elisp
;; Custom Keybindings
(map! :leader
      :desc "fd-dired in cwd"
      "s f" #'fd-dired)

(map! :leader
      :desc "rg in cwd"
      "s g" #'+ivy/project-search-from-cwd)

(map! :mode html-mode
      :leader
      :localleader
      :desc "HTML links"
      "t" #'html-custom-insert-ahref)

(map! :leader
      :desc "Open elfeed RSS reader"
      "o r" #'elfeed)

(map! :leader
      :desc "Run ncmpcpp in vterm"
      "v m" #'vterm-run-ncmpcpp)

(map! :leader
      :desc "Run nnn in vterm"
      "v n" #'vterm-run-nnn)

(map! :leader
      :desc "Run reflex-curses in vterm"
      "v r" #'vterm-run-reflex-curses)

(map! :leader
      :desc "Run tuir in vterm"
      "v t" #'vterm-run-tuir)

(map! :leader
      :desc "Insert current date into buffer"
      "i d" #'org-time-stamp)
#+end_src

* Custom Macros
#+begin_src elisp
(fset 'test-macro-1
   (kmacro-lambda-form [?i ?< ?a ?  ?h ?r ?e ?f ?= ?\" ?\" escape ?x ?A ?> ?< ?/ ?a ?> escape ?h ?h ?h ?h ?h ?i escape ?l] 0 "%d"))

(fset 'html-custom-insert-ahref
   (kmacro-lambda-form [?A return ?< ?a ?h backspace ?  ?h ?r ?e ?d backspace ?f ?= ?\" ?\" backspace right right ?< ?/ ?a left left left left left] 0 "%d"))
#+end_src

* Custom Functions
** custom vterm functions
All these functions open vterm, send a string to vterm containing the name of the program I want to run and sends enter to start it.
#+begin_src elisp
(defun vterm-run-ncmpcpp ()
  "Run ncmpcpp in vterm"
  (interactive)
  (vterm-run-custom-command "ncmpcpp"))

(defun vterm-run-reflex-curses ()
  "Run reflex-curses in vterm"
  (interactive)
  (vterm-run-custom-command "reflex-curses"))

(defun vterm-run-nnn ()
  "Run nnn in vterm"
  (interactive)
  (vterm-run-custom-command "nnn"))

(defun vterm-run-tuir ()
  "Run tuir in vterm"
  (interactive)
  (vterm-run-custom-command "tuir"))

(defun vterm-run-custom-command (vterm-custom-command-name)
  "Run custom command in vterm"
  (interactive)
    (if (get-buffer vterm-custom-command-name)
        (switch-to-buffer vterm-custom-command-name)
      (+vterm/here 0)
      (rename-buffer vterm-custom-command-name)
      (vterm-send-string vterm-custom-command-name)
      (vterm-send-return)))
#+end_src

* Dired Functions
  #+begin_src elisp
;; (defun dired-do-encrypt-file ()
;; "Encrypt the group of marked files"
;; (interactive)
;; (dired-do-shell-command
;;  "gpg -r 'Nicholas Kenworthy' -e" current-prefix-arg
;;  (dired-get-marked-files t current-prefix-arg)))
;; (defun find-school-notes-org-files ()
;;   "Find org files under seniorYear recursively"
;;   (interactive)
;;   (doom-project-find-file "/home/nick/Documents/GU/SeniorYear/"))
#+end_src

* Org-capture
This section handles any custom org-capture functionality.

#+begin_src elisp
(setq org-capture-templates
    '(("d" "Downloaded Programs" item (file+headline "~/.emacsOrgFiles/org/laptop.org" "Downloaded Programs")
       "%?\n + [ ] from AUR? \n")
      ("m" "Music to add" entry (file+headline "~/.emacsOrgFiles/org/laptop.org" "Music")
       "* TODO %?\n" :empty-lines-after 1)
      ("j" "Journal" entry (file+datetree "~/org/journal.org")
       "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src
